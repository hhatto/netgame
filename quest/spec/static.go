// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package spec

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x58\x7b\x73\xdb\x36\x12\xff\x9f\x9f\x62\x03\xe7\xc6\xd2\xd5\x22\xe5\xc8\xa9\x53\x99\xd2\x5c\x2f\xc9\x5d\xd2\xce\x24\x9d\xb8\x97\x4e\xfe\xca\x40\xe4\x8a\x44\x0c\x02\x3c\x00\x94\xac\x4b\xf5\xdd\x6f\x40\x82\x4f\xd1\xae\xdb\x89\x2c\x2e\xf7\xf1\xdb\x27\xb0\x0a\x9f\xbd\xf9\xf8\xfa\xf7\x2f\xbf\xbd\x85\xd4\x64\x7c\xed\x85\xf6\x0f\x70\x2a\x92\x15\x41\x41\x2c\x01\x69\xbc\xf6\x42\xc3\x0c\xc7\xf5\x07\x34\x09\xcd\x30\x0c\xaa\x47\x2f\xe4\x4c\xdc\x81\x42\xbe\x22\xda\x1c\x38\xea\x14\xd1\x10\x48\x15\x6e\x57\x24\x35\x26\xd7\xcb\x20\xc8\xe8\x7d\x14\x0b\x7f\x23\xa5\xd1\x46\xd1\xdc\x3e\x44\x32\x0b\x1a\x42\xb0\xf0\x17\xfe\x75\x10\x69\xdd\xd2\xfc\x8c\x09\x3f\xd2\x9a\x00\x13\x06\x13\xc5\xcc\x61\x45\x74\x4a\x17\xaf\xae\x66\xff\xfc\xfc\x85\xb1\xdb\xf7\xff\xc2\x5f\x2f\xe3\x7f\x67\xbf\x7c\xfa\xf9\xee\x10\x15\xef\x7e\x7e\xf7\x29\x59\xbc\xf8\x98\xfd\x27\xda\xef\xaf\xa5\x58\x7c\xfa\x12\x27\x57\x9f\xe9\x0f\xbf\x65\xb7\xbf\xeb\xff\x05\xbf\xfe\xf8\x6a\xb7\x89\xdf\x7e\x4b\xaf\x0a\x02\x91\x92\x5a\x4b\xc5\x12\x26\x56\x84\x0a\x29\x0e\x99\x2c\xb4\x75\x57\x47\x8a\xe5\x06\xb4\x8a\x56\x24\x08\xe8\x37\x7a\xef\x27\x52\x26\x1c\x69\xce\x74\x09\xdb\xd2\x02\xce\x36\x3a\xf8\xf6\xdf\x02\xd5\x21\x78\xe1\xcf\xfd\x85\x7b\x28\x61\x7f\xd3\x64\x1d\x06\x95\xa6\xb5\xe7\x85\x65\x68\xd6\x5e\xf8\x6c\x36\xf3\x36\x32\x3e\xc0\x77\x0f\x20\xa7\x71\xcc\x44\x32\x33\x32\x5f\xc2\x8b\x79\x7e\x7f\xd3\x21\x6e\xa4\x31\x32\xab\xe9\x47\xcf\xb7\x59\x40\x75\xe1\xf9\x5b\x29\x0d\xaa\x9e\x06\xc5\x92\xd4\x2c\xe1\xf2\x65\x5f\x07\xc7\x6d\x43\x6d\x34\xf4\x04\xfb\x56\x00\x36\x52\xc5\xa8\x1a\xf2\x65\x7e\x0f\x5a\x72\x16\xc3\x19\xbe\xb4\xff\x77\xf5\xa4\x8b\x52\x55\x46\x55\xc2\x44\xe5\xc4\xfc\xa6\x25\xd4\x3a\x4a\x1a\x67\x02\x67\x29\x56\x30\xaf\x6a\x97\x46\x3c\x29\xd5\x5c\xfe\x54\xa1\x89\x24\x97\x6a\x09\x67\xd7\xd7\xd7\x1d\x70\x15\xcb\x18\xb2\x7f\x64\x18\x33\x0a\x93\x8c\x89\xd9\x9e\xc5\x26\x5d\xc2\xf5\x8f\xaf\xf2\xfb\x69\x69\xc2\x8f\xa4\x30\x94\x09\x67\xd1\x02\xbd\x6f\xd8\x16\x2e\x00\xc7\x56\x8d\x8e\x14\xa2\x00\x2a\xe2\x07\x35\xd6\x39\x01\xe8\xfa\x72\x92\x97\x32\x04\xc3\xb4\xcc\x2b\x73\x8d\x96\x06\x54\x2f\x7a\x5d\x5c\xbe\xc1\x2c\xe7\xd4\x60\xc9\x1a\x33\x9d\x73\x7a\x58\x82\x90\x02\xbd\xa3\x37\x9b\xad\xbd\x30\x70\x85\x56\x57\xf1\x1a\xc0\x7b\x3e\xd9\x16\x22\x32\x4c\x8a\xc9\xd4\x19\xd9\x51\x05\x7b\x7d\xe3\x35\x0f\x0a\x35\x9a\x5b\xdb\xba\xb0\x82\x9a\x1d\x1a\x7e\xfb\xdf\xf3\xc9\xf9\x99\xc6\x24\x43\x61\xf4\xf9\xd4\x37\x78\x6f\x26\x84\x4c\xbb\xef\xfd\x1d\x2a\xb6\x65\xa8\x66\xba\x88\x22\xc4\xf8\x7c\xea\xa7\x2c\xc6\xc9\xf4\x66\x9c\x6d\x4b\x19\x7f\x88\xeb\xac\xe4\x3a\x9c\x4f\xed\x0c\x98\x90\x1d\xd3\x6c\xc3\x38\x33\x07\x72\x01\xd5\x13\x47\xe2\x44\x8e\x1d\x57\xea\x20\xdd\x56\x58\x7b\xfe\x88\x22\xbb\x00\xe7\x44\xd7\x37\x2b\xf7\x5c\x63\x02\xab\xae\x9b\xb3\x26\xde\xbe\xa3\x58\x30\x5c\x8a\x13\x87\x6a\x01\x51\x64\x1b\x54\xe7\x17\xa5\x32\x17\x23\x51\x64\x03\x6e\x3b\xce\xd4\x96\x46\xd8\x67\x74\x4a\xfc\x18\x77\x2c\xc2\xaf\x0d\xd7\x40\x3a\x46\x6d\x98\xa0\xd6\xa1\x59\x2a\xb5\x79\x48\x49\xc3\xf5\xd5\x72\x75\x94\x28\x34\x85\x12\xa5\xd0\x49\xf0\x6c\x15\xe4\x18\x7d\x90\xbd\xb0\xe9\x92\x74\x52\x0c\x39\x46\x33\x21\xeb\x5a\x70\x4c\xa7\x09\x51\x18\x21\xdb\xe1\x47\xdb\xbc\x3d\xb5\x65\x3b\x63\xdc\xd5\xcb\xb6\xa3\xe4\xc6\xf9\xa6\x85\xcf\xa7\xbe\x4e\xe5\xbe\x9b\x88\x23\x20\xd7\xf8\x57\x52\xc3\x4a\x3b\x9e\xe0\x8d\xa4\x10\x18\x3d\xdc\x08\x2e\x7e\x02\xf7\xf0\x07\x6e\x6e\x65\x74\x87\x66\x42\xf6\xf6\x9c\xfb\xfe\xdd\x7f\x27\xb5\x39\x1e\x83\xbd\x1e\xd6\xe6\x5e\xc3\xaa\xd6\x5d\x03\xd8\x6b\x5f\x0a\x99\xa3\xe8\x18\x9b\x60\xd7\x58\x24\x85\x96\x1c\x7d\x2e\x93\x09\x71\xd2\x18\xfb\xa4\xe3\x41\x59\xf4\x2c\xba\x43\xd5\xd2\x0c\xcb\xca\x60\x6b\x34\xef\x6d\x1d\xed\x28\x9f\x8c\x7b\x53\x47\x7d\xaf\x4f\x02\xee\x74\x67\xa8\x35\x4d\x10\x56\xf0\x1d\x88\x39\xe4\x48\x96\x40\xee\x10\x73\xdb\x88\x39\x3d\x70\x49\x63\xb2\x04\xa3\x0a\xb4\xce\x0e\x55\xec\xb5\xaf\x51\xc4\x93\x5f\x6e\x3f\x7e\xf0\xb5\x51\x4c\x24\x6c\x7b\x98\x38\xad\xd3\x69\x5f\x62\x3c\x89\x0f\x84\xaf\x9f\xc3\xf2\xdb\x05\x5c\xbe\x84\xbf\xc3\xe5\x7c\x3e\x9f\xba\xc0\x1f\xdb\x50\x47\x5c\x6a\x7c\x62\xac\x2d\x6b\x2f\xce\x25\x02\x51\x70\xee\xb4\xb6\x6a\xdb\x08\x8d\x2b\xb6\x51\x8c\xa9\xa1\xb0\x82\x32\x0a\x39\x55\x1a\x27\xe8\x5b\xda\xd4\x6b\xd8\xf4\x9e\x99\x28\x85\x89\x25\xfb\x36\xd0\x3d\x70\x54\x23\x10\xdb\x64\x64\x79\x92\xbc\x67\xa5\x88\xcb\x05\xfc\xf9\x27\xf4\x08\xf5\x78\x1a\xcd\x70\x55\xcd\xc3\x78\x7a\x7d\x96\xfa\x70\x18\x06\x7e\xd4\x8a\xbf\x95\xea\x2d\x8d\xd2\x4e\xc1\x69\x4c\x2e\x80\x3d\x54\x60\x6e\xf2\x0e\x06\xf7\x64\xc2\x7e\xb8\x9c\x96\xe3\x7a\x7a\x22\x36\x38\x8c\x68\x9e\xdb\x12\x7b\x7e\xc2\x7b\x1c\x00\x6e\xe6\xdb\xa4\x0f\x3d\xc7\xe8\xab\x90\xd3\x81\xdb\xed\xdc\x9a\x8c\x7b\xca\x51\x24\x26\x85\x35\xcc\xa7\xfd\x90\x6d\x14\xd2\xbb\x9b\x41\xf2\xaa\x03\x6d\x24\x7d\x5d\xe5\x63\x41\x7a\xda\x99\x39\xca\xdd\x1e\xc4\xc3\x71\xd9\x0d\xe5\x63\x47\x6d\xca\xe2\x18\x05\x79\x6a\x9f\x3e\xf1\x1a\xf0\xb8\x6b\x63\x58\x8f\x8f\x05\xf8\x78\xd2\x93\xa8\x94\x54\x7f\xd9\xea\x25\x57\xdd\x89\x37\x5d\x25\xcf\x27\xc4\x85\x85\x4c\x7d\x29\xec\x40\x60\xd1\x1d\xb9\x78\xa4\xc5\x47\x07\xa5\xd3\xd1\x9d\x8c\x4f\x9f\x88\xee\xa8\xd9\x52\xae\xd1\xa1\x9b\xde\x78\xf6\xdf\xc9\x72\x01\xd6\xe0\x8a\xd8\xa3\xd8\xae\x51\x64\xed\x95\x7b\x5c\x85\x50\xee\x50\x6d\xb9\xdc\x2f\xa1\xca\xa6\xbd\x2c\x37\x6b\xc8\xd8\x6b\x68\xaf\xab\xcd\xf5\xb5\xba\x99\x36\x8f\xee\x3a\x7c\x39\x9f\xff\xad\x22\xd4\xd7\xfb\x8a\x72\xf4\xce\xb8\x4c\x9c\x81\x0d\x8d\xee\x12\x25\x0b\x11\x2f\x61\x9f\x32\x83\xa3\x1a\x5b\x83\xfe\x4b\xcc\x4e\x3f\x1d\x97\xd4\xcc\xc6\x7f\x09\x74\xa3\x25\x2f\x6a\x65\xd5\x02\xd2\xf2\xb9\x5b\x76\x4b\xa8\x2f\xe3\x2d\xa5\xb9\x64\xd7\x84\x36\x10\xb4\x30\xb2\x71\x22\x57\xd8\x59\x75\x4a\xbc\x47\xef\x6c\x2b\x55\xd6\xbf\xef\x2f\x61\x5e\xe3\xed\x9a\x19\xba\xf9\x80\x03\xcd\xd2\x35\xf0\xa0\x5a\x00\x46\x02\x3e\x96\xd5\xb6\x99\xea\x6a\xfc\xde\xc3\x60\x17\xbd\x0a\xff\xb0\xed\x2e\xe0\xa4\x6f\x9d\x6c\xbd\x69\xd8\x45\xc3\x4a\x36\x5b\x46\x18\x54\x3f\x0d\x78\xa1\x2d\xa6\xb5\x6d\x9c\x30\x66\x3b\x88\x38\xd5\x7a\x45\x9a\x6b\x17\x81\x52\x60\x45\x7a\x9a\xc8\xba\xd4\xde\x95\x70\x9b\x50\xc4\x91\xaa\x2d\xbb\x77\x1c\x00\x61\xba\xa8\x59\x6c\x81\xcf\xb2\xc2\x60\x4c\xd6\x1f\xd0\xec\xa5\xba\x03\x3b\xbe\xa1\xfc\xe1\x01\x66\xf0\x41\xfa\x10\xea\x9c\x0a\x60\xf1\x8a\xb8\x4b\x6a\xb9\x8d\xe7\x54\xac\xc3\x20\x5d\x38\xbb\x41\xcc\x76\x6b\xaf\xc5\x50\xb2\xbb\xc9\x6e\xf9\x07\xaf\x9d\x7d\x25\xf7\x2d\xac\x9e\xb3\x7c\x96\xc5\xb3\x2b\x70\x5f\xe4\x76\xab\xd1\xcc\xae\x1a\x66\x80\x70\x53\x18\x23\x2b\x5c\xf5\x58\xa8\xba\xb6\x7a\x41\x6a\x5d\x1b\x23\x60\x63\xc4\x6c\x4f\x95\x60\x22\x29\xbf\xf3\xea\xcf\x86\xcb\xe8\x8e\xac\x3f\x97\xe2\x20\xaa\x00\x84\x41\xa5\xa0\xc1\x55\x61\x1f\xf5\xb2\x75\x03\x86\xa5\xf2\x98\x5f\x97\x2f\xba\x8e\x74\xde\x53\x8e\xca\x40\xf9\x39\x8b\xa9\x48\x50\xc1\xa0\xb0\x08\x28\x69\x93\x5f\xf2\x74\xb4\x00\xbc\xa6\x42\x48\x53\xdf\xea\x7c\x78\x9d\x62\xe4\xb2\x69\xb7\xee\x6a\x11\xb2\xaf\xb7\x2c\x29\x54\xb9\xcc\xf8\x2d\x88\xd6\xc9\xc7\x30\x95\xa5\xac\x35\x0c\x6b\xfb\x61\x54\x6f\xa4\xc0\x67\xf0\x45\x16\xe0\x64\xb7\x05\xe7\x87\x06\x06\x3a\x5c\x3e\xfc\xc1\x38\x87\x18\x39\xdb\xa1\x02\x81\xf7\xa6\x5b\x88\x5a\x4a\xe1\xfb\xfe\x03\x78\x4f\x33\xd4\x4d\xd5\xb0\x1c\x9b\x45\x94\xb4\x5d\xe0\x08\xa7\x3d\xe4\x64\x3a\xbd\x73\xb5\xae\x77\xe1\xaa\x2f\xfa\x8c\x6e\x69\xed\x76\xc8\x55\x23\x6b\xe8\x86\x63\x63\xb4\x7c\x28\x3f\x67\x1b\xb7\xa5\x75\xab\xc2\xa8\x6e\x18\x43\x93\x0e\x6a\x68\x41\xd6\xef\xeb\xa5\x36\x0c\x4c\xda\xe7\x8e\x07\xdc\x3f\x41\xb3\x01\x5b\x6c\x26\xee\x58\x0a\xba\xa6\x9e\x62\xf7\x4d\xbb\x0e\x83\xdd\xd0\x9e\x62\x7e\xb8\x68\x3f\x86\x22\x0c\xca\xb0\x8c\x67\x34\x0c\xaa\xf1\x18\x06\xd5\x2f\xac\xff\x0f\x00\x00\xff\xff\xef\x93\xf8\xab\x72\x15\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 5490, mode: os.FileMode(420), modTime: time.Unix(1481039445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

